{{define "main"}}
// ********************************************************* //
// The content of this file is auto-generated, DO NOT MODIFY //
// ********************************************************* //

package tuple

{{$types := .Types}}

{{range $f := $types}}
	{{template "tmpl" gtMakeMap "Name" (printf "%s" $f.Name) "FirstType" $f.Type "SecondType" "interface{}" "ThirdType" "interface{}"}}
	{{template "tmpl" gtMakeMap "Name" (printf "%ss" $f.Name) "FirstType" $f.Type "SecondType" $f.Type "ThirdType" $f.Type}}
	{{range $s := $types}}
		{{if (ne $f.Name $s.Name)}}
			{{template "tmpl" gtMakeMap "Name" (printf "%ss%s" $f.Name $s.Name) "FirstType" $f.Type "SecondType" $f.Type "ThirdType" $s.Type}}
			{{template "tmpl" gtMakeMap "Name" (printf "%s%ss" $f.Name $s.Name) "FirstType" $f.Type "SecondType" $s.Type "ThirdType" $s.Type}}
			{{range $t := $types}}
				{{if (ne $s.Name $t.Name)}}
					{{template "tmpl" gtMakeMap "Name" (printf "%s%s%s" $f.Name $s.Name $t.Name) "FirstType" $f.Type "SecondType" $s.Type "ThirdType" $t.Type}}
				{{end}}
			{{end}}
		{{end}}
	{{end}}
{{end}}

{{end}}

{{define "tmpl"}}
type {{.Name}}Triplet struct {
	First  {{.FirstType}}
	Second {{.SecondType}}
	Third  {{.ThirdType}}
}

func New{{.Name}}Triplet(f {{.FirstType}}, s {{.SecondType}}, t {{.ThirdType}}) {{.Name}}Triplet {
	return {{.Name}}Triplet{First: f, Second: s, Third: t}
}

func Newp{{.Name}}Triplet(f {{.FirstType}}, s {{.SecondType}}, t {{.ThirdType}}) *{{.Name}}Triplet {
	return &{{.Name}}Triplet{First: f, Second: s, Third: t}
}
{{end}}
